AWSTemplateFormatVersion: '2010-09-09'
Description: 'Todo Task Manager - Serverless Backend Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  JwtSecret:
    Type: String
    NoEcho: true
    Description: JWT secret key for token signing
    MinLength: 32

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-todo-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-todo-tasks'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: priority
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: taskId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PriorityIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: priority
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-todo-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt TasksTable.Arn
                  - !Sub '${TasksTable.Arn}/index/*'

  # Lambda Functions
  RegisterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-register'
      Runtime: java11
      Handler: com.todoapp.lambda.RegisterHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          JWT_SECRET: !Ref JwtSecret
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-login'
      Runtime: java11
      Handler: com.todoapp.lambda.LoginHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          JWT_SECRET: !Ref JwtSecret
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  AuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-authorizer'
      Runtime: java11
      Handler: com.todoapp.lambda.AuthorizerHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  CreateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-create-task'
      Runtime: java11
      Handler: com.todoapp.lambda.CreateTaskHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  GetTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-get-task'
      Runtime: java11
      Handler: com.todoapp.lambda.GetTaskHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  ListTasksFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-list-tasks'
      Runtime: java11
      Handler: com.todoapp.lambda.ListTasksHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  UpdateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-update-task'
      Runtime: java11
      Handler: com.todoapp.lambda.UpdateTaskHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  DeleteTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-todo-delete-task'
      Runtime: java11
      Handler: com.todoapp.lambda.DeleteTaskHandler::handleRequest
      Code:
        S3Bucket: !Sub '${Environment}-todo-lambda-artifacts'
        S3Key: todo-backend-java.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TodoTaskManager

  # API Gateway
  TodoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-todo-api'
      Description: Todo Task Manager API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'

  # API Gateway Authorizer
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${Environment}-todo-authorizer'
      RestApiId: !Ref TodoApi
      Type: TOKEN
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations'
      AuthorizerCredentials: !GetAtt ApiGatewayLambdaRole.Arn
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization

  # API Gateway Lambda Invoke Role
  ApiGatewayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn

  # API Gateway Resources and Methods
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !GetAtt TodoApi.RootResourceId
      PathPart: auth

  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !Ref AuthResource
      PathPart: register

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !Ref AuthResource
      PathPart: login

  TasksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !GetAtt TodoApi.RootResourceId
      PathPart: tasks

  TaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !Ref TasksResource
      PathPart: '{taskId}'

  # Methods
  RegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterFunction.Arn}/invocations'

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations'

  CreateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TasksResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTaskFunction.Arn}/invocations'

  ListTasksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TasksResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTasksFunction.Arn}/invocations'

  GetTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TaskResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTaskFunction.Arn}/invocations'

  UpdateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TaskResource
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTaskFunction.Arn}/invocations'

  DeleteTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TaskResource
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskFunction.Arn}/invocations'

  # CORS Options Methods
  TasksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TasksResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  TaskOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TaskResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AuthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref AuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  RegisterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  LoginLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  AuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/authorizers/*'

  CreateTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  GetTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  ListTasksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListTasksFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  UpdateTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  DeleteTaskLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RegisterMethod
      - LoginMethod
      - CreateTaskMethod
      - ListTasksMethod
      - GetTaskMethod
      - UpdateTaskMethod
      - DeleteTaskMethod
      - TasksOptionsMethod
      - TaskOptionsMethod
      - AuthOptionsMethod
    Properties:
      RestApiId: !Ref TodoApi
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  UsersTableName:
    Description: DynamoDB Users table name
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-UsersTable'

  TasksTableName:
    Description: DynamoDB Tasks table name
    Value: !Ref TasksTable
    Export:
      Name: !Sub '${AWS::StackName}-TasksTable'

  LambdaExecutionRoleArn:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'
